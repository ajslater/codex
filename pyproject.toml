[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "codex"
version = "1.6.0a11"
description = "A comic archive web server."
license = "GPL-3.0-only"
authors = ["AJ Slater <aj@slater.net>"]
readme = "README.md"
homepage = "https://github.com/ajslater/codex"
repository = "https://github.com/ajslater/codex"
documentation = "https://github.com/ajslater/codex"
keywords = ["comic", "cbz", "cbr", "cbt", "pdf"]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Environment :: Web Environment",
  "Framework :: Django :: 5.0",
  "Intended Audience :: End Users/Desktop",
  "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: JavaScript",
  "Programming Language :: Python :: 3 :: Only",
  "Topic :: Internet :: WWW/HTTP",
  "Topic :: Multimedia :: Graphics :: Viewers",
]
packages = [{ include = "codex" }, { include = "tests", format = "sdist" }]
exclude = [
  "*/**/*~",
  "codex/img/*.svg",
  "codex/static_src/*",
  "codex/static_build/*",
]
include = ["codex/static_root/**/*"]

[tool.poetry.dependencies]
python = "^3.10"
aioprocessing = "^2.0.1"
ansicolors = "^1.1"
bidict = "^0.23.1"
case-converter = "^1.1.0"
channels = "^4.0.0"
comicbox = { extras = ["pdf"], version = "^1.1.8" }
django = "^5.0.6"
djangorestframework = "^3.15.1"
djangorestframework-camel-case = "^1.4.2"
django-cachalot = "^2.6.2"
django-cors-headers = "^4.0"
django-rest-registration = "^0.8.3"
django-vite = "^3.0.1"
drf-spectacular = "^0.27.2"
fnvhash = "^0.1"
humanfriendly = "^10.0"
humanize = "^4.0.0"
hypercorn = { extras = ["h3"], version = "^0.17.3" }
psutil = "^5.9.4"
python-dateutil = "^2.8.2"
requests = "^2.24"
setuptools = "^70.0.0"                                 # for vendored haystack
tzlocal = "^5.0"
watchdog = "^4.0"
websocket_client = "^1.2"
whitenoise = { extras = ["brotli"], version = "^6.0" }
whoosh-reloaded = "^2.7.5"
Pillow = "^10.0.0"

[tool.poetry.group.dev.dependencies]
picopt = "^4.0.1"
neovim = "^0.3.1"
nplusone = "^1.0.0"
vendorize = "^0.3.0"

[tool.poetry.group.test.dependencies]
coverage = { extras = ["toml"], version = "^7.0" }
pytest-asyncio = "^0.23.2"
pytest-cov = "^5.0"
pytest-django = "^4.1"
pytest-gitignore = "^1.3"

[tool.poetry.group.lint.dependencies]
# pyright looks for cairosvg so can't be in dev
cairosvg = "^2.7.1"
codespell = "^2.1.0"
djangorestframework-types = "^0.8.0"
django-types = "^0.19.1"
djlint = "^1.2.1"
pyright = "^1.1.357"
radon = { extras = ["toml"], version = "^6.0.1" }
ruff = "^0.4.1"
types-python-dateutil = "^2.8.19"
vulture = "^2.3"

[tool.poetry.scripts]
codex = "codex.run:main"

[tool.poetry.urls]
"News" = "https://github.com/ajslater/codex/blob/main/NEWS.md"
"Docker Image" = "https://hub.docker.com/r/ajslater/codex"
"Report Issues" = "https://github.com/ajslater/codex/issues"

[tool.codespell]
skip = './cache,./codex/_vendor,./codex/static_build,./codex/static_root,./comics,./config,./dist,./frontend/coverage,./test-results,.git,.mypy_cache,.pytest_cache,.venv*,*~,_vendor/haystack,node_modules,package-lock.json,poetry.lock,run.spec'
builtin = 'clear,rare,code'
check-hidden = true
# Remove 'coverd' when this issue is resolved
# https://github.com/codespell-project/codespell/issues/1212
ignore-words-list = 'thead,ro,jupyter,coverd,searchd,ws,falsy'

[tool.coverage.html]
directory = "test-results/coverage"

[tool.coverage.run]
source = ["codex"]
branch = true
concurrency = ["multiprocessing"]
omit = [
  ".git/*",
  ".mypy_cache/*",
  ".pytest_cache/*",
  ".venv*/*",
  "*__pycache__*",
  "cache/*",
  "codex/_vendor/*",
  "codex/static_build/*",
  "codex/static_root/*",
  "comics/*",
  "dist/*",
  "frontend/*",
  "node_modules/*",
  "test-results/*",
  "typings/*",
]

[tool.djlint]
ignore = "H030,H031"
extend_exclude = "dist"

[tool.pyright]
exclude = [
  "**/__pycache__",
  "**/node_modules",
  ".git",
  ".mypy_cache",
  ".pytest_cache",
  ".venv*",
  "cache",
  "codex/_vendor",
  "codex/search/backend_search.py",
  "codex/static_build",
  "codex/static_root",
  "comics",
  "config",
  "dist",
  "frontend",
  "package-lock.json",
  "poetry.lock",
  "test-results",
  "typings",
]
useLibraryCodeForTypes = true
reportMissingImports = true
reportImportCycles = true
pythonVersion = "3.10"
pythonPlatform = "All"

[tool.pytest.ini_options]
asyncio_mode = "strict"
addopts = """
    --junit-xml=test-results/pytest/results.xml
    -ra
    --strict-config
    --strict-markers
    --cov
    --cov-append
    --cov-report=html
    --cov-report=term
"""
junit_family = "xunit2"
testpaths = "tests"
DJANGO_SETTINGS_MODULE = "codex.settings.settings"

[tool.radon]
exclude = """\
  *~,.git/*,.mypy_cache/*,.pytest_cache/*,.venv*,__pycache__/*\
  ,cache/*,codex/_vendor/*,codex/static_build/*,codex/static_root/*\
  ,config/*,dist/*,frontend/*,node_modules/*,test-results/*,typings/*\
  ,codex/search/backend_search.py\
  """

[tool.ruff]
extend-exclude = ["cache", "codex/_vendor", "frontend", "typings"]
show-fixes = true
target-version = "py310"

[tool.ruff.lint]
extend-ignore = [
  "S101",
  "D203",
  "D213",
  "W191",
  "E501",
  "E111",
  "E114",
  "E117",
  "D206",
  "D300",
  "Q000",
  "Q001",
  "Q002",
  "Q003",
  "COM812",
  "COM819",
  "ISC001",
  "ISC002",
]
extend-select = [
  "A",
  "ARG",
  "B",
  "B9",
  "C",
  "C4",
  "C90",
  "D",
  "DJ",
  "DTZ",
  "E",
  "EM",
  "EXE",
  "F",
  "I",
  "ICN",
  "INP",
  "ISC",
  "PIE",
  "PL",
  "PT",
  "PTH",
  "PYI",
  "Q",
  "N",
  "RET",
  "RSE",
  "RUF",
  "S",
  "SIM",
  "SLF",
  "T10",
  "T20",
  "TCH",
  "TID",
  "TRY",
  "UP",
  "W",
  "YTT",
  # "ANN", "ERA", "COM"
]
external = ["V101"]
task-tags = ["TODO", "FIXME", "XXX", "http", "HACK"]

[tool.ruff.lint.flake8-self]
ignore-names = ["_meta"]

[tool.ruff.lint.flake8-unused-arguments]
ignore-variadic-names = true

[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = true

[tool.ruff.lint.per-file-ignores]
"codex/logger/*" = ["T201"]
"codex/migrations/*" = ["RUF012", "T201"]
"codex/models/__init__.py" = ["F403"]
"codex/settings/*" = ["T201"]
"mock_comics/*" = ["S311", "T201"]
"codex/search/backend_search.py" = [
  "ARG002",
  "C901",
  "D101",
  "D102",
  "DTZ001",
  "EM101",
  "N812",
  "PLR0913",
  "PLR0911",
  "PLR0912",
  "PLR0915",
  "RET505",
  "TRY003",
  "UP031",
]

[tool.vulture]
exclude = [
  ".git/",
  ".mypy_cache/",
  ".pytest_cache/",
  "*.venv*",
  "*/__pycache__",
  "cache/",
  "codex/_vendor",
  "codex/search/backend_search.py",
  "codex/static_build/",
  "codex/static_root/",
  "frontend/",
  "comics/",
  "dist/",
  "node_modules/",
  "test_results/",
  "typings/",
]
min_confidence = 61
sort_by_size = true
