[project]
authors = [{ name = "AJ Slater", email = "aj@slater.net" }]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Environment :: Web Environment",
  "Framework :: Django :: 5.1",
  "Intended Audience :: End Users/Desktop",
  "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: JavaScript",
  "Programming Language :: Python :: 3 :: Only",
  "Topic :: Internet :: WWW/HTTP",
  "Topic :: Multimedia :: Graphics :: Viewers",
]
dependencies = [
  "aioprocessing~=2.0",
  "ansicolors~=1.1",
  "bidict~=0.23",
  "channels~=4.2",
  "comicbox[pdf]~=2.0.0a32",
  "dateparser~=1.2",
  "django~=5.2.4",
  "djangorestframework~=3.16.0",
  "djangorestframework-camel-case~=1.4.2",
  "django-cachalot~=2.7.dev0",
  "django-cors-headers~=4.0",
  "django-rest-registration~=0.9.0",
  "django-vite~=3.1.0",
  "drf-spectacular~=0.28",
  "fnvhash~=0.1",
  "humanfriendly~=10.0",
  "humanize~=4.12",
  "hypercorn[h3]~=0.17",
  "nh3~=0.2",
  "psutil~=7.0.0",
  "pyparsing~=3.2",
  "requests~=2.24",
  "typing-extensions~=4.14",
  "tzlocal~=5.0",
  "watchdog~=6.0.0",
  "websocket-client~=1.2",
  "whitenoise[brotli]~=6.0",
  "versio~=0.5",
  "zipstream-ng~=1.8.0",
  "Pillow~=11.3",
  "loguru~=0.7.3",
]
description = "A comic archive web server."
keywords = ["comic", "cbz", "cbr", "cb7", "cbt", "pdf"]
name = "codex"
license = { text = "GPL-3.0-only" }
readme = "README.md"
requires-python = "<4.0,>=3.10"
version = "1.8.0a7"

[project.urls]
News = "https://github.com/ajslater/codex/blob/main/NEWS.md"
"Docker Image" = "https://hub.docker.com/r/ajslater/codex"
"Report Issues" = "https://github.com/ajslater/codex/issues"
repository = "https://github.com/ajslater/codex"
documentation = "https://github.com/ajslater/codex"
homepage = "https://github.com/ajslater/codex"

[project.scripts]
codex = "codex.run:main"

[dependency-groups]
dev = [
  "basedpyright~=1.30.1",
  "cairosvg~=2.8.2",
  "codespell~=2.4.1",
  "coverage[toml]~=7.0",
  "djangorestframework-types~=0.9.0",
  "django-schema-graph~=3.1.0",
  "django-types~=0.21.0",
  "djlint~=1.3.dev0",
  "hatchling~=1.27.0",
  "icecream~=2.1.4",
  "neovim~=0.3.1",
  "nplusone~=1.0.0",
  "picopt~=5.2.0",
  "pytest-asyncio~=1.0.0",
  "pytest-cov~=6.0",
  "pytest-django~=4.1",
  "pytest-gitignore~=1.3",
  "radon[toml]~=6.0.1",
  "ruff~=0.12.2",
  "toml-cli~=0.7.0",
  "types-python-dateutil~=2.9",
  "vulture~=2.3",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build]
ignore-vcs = true
skip-excluded-dirs = true

[tool.hatch.build.targets.wheel]
artifacts = ["codex/static_root/**"]
exclude = [
  "**/*~",
  "codex/**/README.md",
  "codex/img",
  "codex/static_src",
  "docker",
]
packages = ["codex"]

[tool.hatch.build.targets.sdist]
exclude = ["**/*~"]
packages = ["codex", "tests"]

[tool.basedpyright]
exclude = [
  "**/.*",
  "**/__pycache__",
  "**/node_modules",
  "codex/_vendor",
  "codex/search/backend_search.py",
  "codex/static_build",
  "codex/static_root",
  "comics",
  "config",
  "dist",
  "frontend",
  "test-results",
  "typings",
  "vulture_ignorelist.py",
]
pythonVersion = "3.10"
failOnWarnings = false
reportAny = false
reportExplicitAny = false
reportImportCycles = true
reportIncompatibleUnannotatedOverride = true
reportMissingParameterType = false
reportMissingTypeArgument = false
reportPrivateUsage = false # ruff does this
reportUnannotatedClassAttribute = false
reportUnknownArgumentType = false
reportUnknownMemberType = false
reportUnknownParameterType = false
reportUnknownVariableType = false
reportUnusedCallResult = false
reportUnusedParameter = false # ruff does this 
reportMissingTypeStubs = false

[tool.codespell]
skip = ".*,*~,./codex/_vendor,./codex/static_build,./codex/static_root,./comics,./config,./dist,./frontend/coverage,./node_modules,./package.json,./package-lock.json,./uv.lock,./test-results"

builtin = 'clear,rare,code'
check-hidden = true
# Remove 'coverd' when this issue is resolved
# https://github.com/codespell-project/codespell/issues/1212
ignore-words-list = 'thead,ro,coverd,searchd,ws,falsy,versio'

[tool.coverage.html]
directory = "test-results/coverage"

[tool.coverage.run]
source = ["codex"]
branch = true
concurrency = ["multiprocessing"]
omit = [
  "*/.*",
  "*__pycache__*",
  "codex/_vendor/*",
  "codex/static_build/*",
  "codex/static_root/*",
  "comics/*",
  "dist/*",
  "frontend/*",
  "node_modules/*",
  "test-results/*",
  "typings/*",
  "vulture_ignorelist.py",
]

[tool.djlint]
extend_exclude = "*/.*,__pycache__,codex/_vendor,codex/static_build,codex/static_root,./comics,dist,test-results,typings"
ignore = "H030,H031"
profile = "django"
use_gitignore = true

[tool.pytest.ini_options]
asyncio_mode = "strict"
addopts = """
    --junit-xml=test-results/pytest/results.xml
    -ra
    --strict-config
    --strict-markers
    --cov
    --cov-append
    --cov-report=html
    --cov-report=term
"""
junit_family = "xunit2"
testpaths = "tests"
DJANGO_SETTINGS_MODULE = "codex.settings"
pythonpath = ["."]

[tool.radon]
exclude = """\
  *~,.*,.*/*,__pycache__/*
  ,codex/_vendor/*,codex/static_build/*,codex/static_root/*
  ,config/*,dist/*,frontend/*,node_modules/*,test-results/*,typings/*
  """

[tool.ruff]
builtins = ["ic"]
extend-exclude = [
  "**/.*",
  "**/__pycache__",
  "codex/_vendor",
  "dist",
  "frontend",
  "test-results",
  "typings",
  "vulture_ignorelist.py",
]
show-fixes = true
target-version = "py310"

[tool.ruff.lint]
extend-ignore = [
  "BLE001",  # catch bare exception
  "COM812",  # missing trailing comma
  "COM819",  # prohibit trailing comma
  "D203",    # blank line before class docstring
  "D206",    # formatted
  "D212",    # first line multi line docstring.
  "E111",    # formatted
  "E114",    # formatted
  "E117",    # over-indented
  "E501",    # 88 char line
  "ISC001",  # formatted
  "PERF203", # try block in loop
  "S101",    # assert
  "W191",    # formatted
]
extend-select = [
  "A",
  # "AIR",
  # "ANN",
  "ARG",
  "ASYNC",
  "B",
  "B9",
  "BLE",
  "C",
  "C4",
  "C90",
  "COM",
  # "CPY",
  "D",
  "DJ",
  # "DOC",
  "DTZ",
  "E",
  "EM",
  "ERA",
  "EXE",
  "F",
  "FA",
  # "FAST",
  "FBT",
  "FIX",
  "FLY",
  "FURB",
  # "G",
  "I",
  "ICN",
  "INP",
  "INT",
  "ISC",
  "LOG",
  # "PD",
  "PERF",
  "PGH",
  "PIE",
  "PL",
  "PT",
  "PTH",
  "PYI",
  # "Q", Formatted
  "N",
  # NPY,
  "RET",
  "RSE",
  "RUF",
  "S",
  "SIM",
  "SLF",
  "SLOT",
  "T10",
  "T20",
  "TC",
  "TCH",
  # "TD",
  "TID",
  "TRY",
  "UP",
  "W",
  "YTT",
]
external = ["V101"]
task-tags = ["TODO", "FIXME", "XXX", "http", "HACK"]

[tool.ruff.lint.flake8-self]
ignore-names = ["_meta"]

[tool.ruff.lint.flake8-unused-arguments]
ignore-variadic-names = true

[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = true

[tool.ruff.lint.per-file-ignores]
"codex/logger/*" = ["T201"]
"codex/migrations/*" = ["RUF012", "T201"]
"codex/models/__init__.py" = ["F403"]
"codex/settings/*" = ["T201"]
"mock_comics/*" = ["S311", "T201"]
"codex/search/backend_search.py" = [
  "ARG002",
  "C901",
  "D101",
  "D102",
  "DTZ001",
  "EM101",
  "N812",
  "PLR0913",
  "PLR0911",
  "PLR0912",
  "PLR0915",
  "RET505",
  "TRY003",
  "UP031",
]
"tests/*" = ["D101", "D102", "T203"]

[tool.vulture]
exclude = [
  "*/.*",
  "*/__pycache__*",
  "*/node_modules*",
  "codex/_vendor",
  "codex/search/backend_search.py",
  "codex/static_build/",
  "codex/static_root/",
  "comics/",
  "dist/",
  "frontend/",
  "test_results/",
  "typings/",
]
min_confidence = 61
sort_by_size = true
