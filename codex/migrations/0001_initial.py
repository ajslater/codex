# Generated by Django 3.0.4 on 2020-04-02 21:01

import codex.models
import codex.validators
import datetime
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Character',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(null=True)),
                ('name', models.CharField(max_length=32)),
            ],
            options={
                'abstract': False,
                'unique_together': {('name',)},
            },
        ),
        migrations.CreateModel(
            name='Imprint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(null=True)),
                ('name', models.CharField(max_length=32)),
                ('display_name', models.CharField(max_length=32)),
                ('default', models.BooleanField(default=False)),
            ],
            bases=(models.Model, codex.models.ParentMixin),
        ),
        migrations.CreateModel(
            name='RootPath',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(null=True)),
                ('path', models.CharField(max_length=128, unique=True, validators=[codex.validators.validate_path_exists])),
                ('scan_frequency', models.DurationField(default=datetime.timedelta(seconds=43200))),
                ('last_scan', models.DateTimeField(null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Series',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(null=True)),
                ('name', models.CharField(max_length=32)),
                ('display_name', models.CharField(max_length=32)),
                ('default', models.BooleanField(default=False)),
                ('volume_count', models.PositiveSmallIntegerField(null=True)),
                ('imprint', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='codex.Imprint')),
            ],
            options={
                'unique_together': {('name', 'imprint', 'default')},
            },
            bases=(models.Model, codex.models.ParentMixin),
        ),
        migrations.CreateModel(
            name='Volume',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(null=True)),
                ('name', models.CharField(max_length=32)),
                ('display_name', models.CharField(max_length=32)),
                ('default', models.BooleanField(default=False)),
                ('issue_count', models.DecimalField(decimal_places=2, max_digits=6, null=True)),
                ('series', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='codex.Series')),
            ],
            options={
                'unique_together': {('name', 'series', 'default')},
            },
            bases=(models.Model, codex.models.ParentMixin),
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(null=True)),
                ('name', models.CharField(max_length=32)),
            ],
            options={
                'abstract': False,
                'unique_together': {('name',)},
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(null=True)),
                ('name', models.CharField(max_length=32)),
            ],
            options={
                'abstract': False,
                'unique_together': {('name',)},
            },
        ),
        migrations.CreateModel(
            name='StoryArc',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(null=True)),
                ('name', models.CharField(max_length=32)),
            ],
            options={
                'abstract': False,
                'unique_together': {('name',)},
            },
        ),
        migrations.CreateModel(
            name='SeriesGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(null=True)),
                ('name', models.CharField(max_length=32)),
            ],
            options={
                'abstract': False,
                'unique_together': {('name',)},
            },
        ),
        migrations.CreateModel(
            name='Publisher',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(null=True)),
                ('name', models.CharField(max_length=32)),
                ('display_name', models.CharField(max_length=32)),
                ('default', models.BooleanField(default=False)),
            ],
            options={
                'unique_together': {('name', 'default')},
            },
            bases=(models.Model, codex.models.ParentMixin),
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(null=True)),
                ('name', models.CharField(max_length=32)),
            ],
            options={
                'abstract': False,
                'unique_together': {('name',)},
            },
        ),
        migrations.AddField(
            model_name='imprint',
            name='publisher',
            field=models.ForeignKey(on_delete=models.SET(codex.models.Publisher.get_default_publisher), to='codex.Publisher'),
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(null=True)),
                ('name', models.CharField(max_length=32)),
            ],
            options={
                'abstract': False,
                'unique_together': {('name',)},
            },
        ),
        migrations.CreateModel(
            name='CreditRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(null=True)),
                ('name', models.CharField(max_length=32)),
            ],
            options={
                'abstract': False,
                'unique_together': {('name',)},
            },
        ),
        migrations.CreateModel(
            name='CreditPerson',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(null=True)),
                ('name', models.CharField(max_length=32)),
            ],
            options={
                'abstract': False,
                'unique_together': {('name',)},
            },
        ),
        migrations.CreateModel(
            name='Credit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(null=True)),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='codex.CreditPerson')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='codex.CreditRole')),
            ],
            options={
                'unique_together': {('person', 'role')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='imprint',
            unique_together={('name', 'publisher', 'default')},
        ),
        migrations.CreateModel(
            name='Comic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(null=True)),
                ('name', models.CharField(max_length=32)),
                ('display_name', models.CharField(max_length=32)),
                ('path', models.CharField(max_length=128, null=True)),
                ('issue', models.DecimalField(decimal_places=2, default=0.0, max_digits=6)),
                ('alternate_issue', models.DecimalField(decimal_places=2, max_digits=6, null=True)),
                ('title', models.CharField(max_length=64, null=True)),
                ('year', models.PositiveSmallIntegerField(null=True)),
                ('month', models.PositiveSmallIntegerField(null=True)),
                ('day', models.PositiveSmallIntegerField(null=True)),
                ('comments', models.TextField(null=True)),
                ('notes', models.TextField(null=True)),
                ('description', models.TextField(null=True)),
                ('critical_rating', models.CharField(max_length=32, null=True)),
                ('maturity_rating', models.CharField(max_length=32, null=True)),
                ('user_rating', models.CharField(max_length=32, null=True)),
                ('country', models.CharField(max_length=2, null=True)),
                ('language', models.CharField(max_length=2, null=True)),
                ('web', models.URLField(null=True)),
                ('book_format', models.CharField(max_length=16, null=True)),
                ('read_ltr', models.BooleanField(default=True)),
                ('page_count', models.PositiveSmallIntegerField(default=0)),
                ('cover_image', models.CharField(max_length=64, null=True)),
                ('scan_info', models.CharField(max_length=32, null=True)),
                ('black_and_white', models.BooleanField(default=False)),
                ('identifier', models.CharField(max_length=64, null=True)),
                ('date', models.DateField(null=True)),
                ('alternate_volumes', models.ManyToManyField(related_name='alternate_volume', to='codex.Volume')),
                ('characters', models.ManyToManyField(to='codex.Character')),
                ('credits', models.ManyToManyField(to='codex.Credit')),
                ('genres', models.ManyToManyField(to='codex.Genre')),
                ('locations', models.ManyToManyField(to='codex.Location')),
                ('root_path', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='codex.RootPath')),
                ('series_groups', models.ManyToManyField(to='codex.SeriesGroup')),
                ('story_arcs', models.ManyToManyField(to='codex.StoryArc')),
                ('tags', models.ManyToManyField(to='codex.Tag')),
                ('teams', models.ManyToManyField(to='codex.Team')),
                ('volume', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='codex.Volume')),
            ],
            options={
                'unique_together': {('path', 'volume', 'year', 'issue')},
            },
            bases=(models.Model, codex.models.ParentMixin),
        ),
    ]
