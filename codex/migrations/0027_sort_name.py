"""Generated by Django 5.0.4 on 2024-05-05 23:11."""

import os
from contextlib import suppress
from pathlib import Path

from django.db import migrations, models

from codex.models.util import get_sort_name

CONFIG_PATH = Path(os.environ.get("CODEX_CONFIG_DIR", Path.cwd() / "config"))
COVER_ROOT = CONFIG_PATH / "cache" / "covers"
_GROUP_MODEL_NAMES = (
    "publisher",
    "imprint",
    "series",
    "storyarc",
    "folder",
    "comic",
    "failedimport",
)


def _set_sort_name(obj):
    """Create sort_name for model."""
    obj.sort_name = get_sort_name(obj.name)


def _generate_sort_name(apps, _schema_editor):
    """Update new sort_name field."""
    for model_name in _GROUP_MODEL_NAMES:
        model = apps.get_model("codex", model_name)
        update_fields = ("sort_name",)
        only_fields = ("name", *update_fields)
        update_groups = []
        objs = model.objects.only(*only_fields)
        for obj in objs:
            _set_sort_name(obj)
            update_groups.append(obj)
        if update_groups:
            model.objects.bulk_update(update_groups, update_fields)
            print(f"\tUpdated sort_name for {len(update_groups)} {model_name}s")


def _remove_cover_symlinks(_apps, _schema_editor):
    """Remove old missing cover symlinks."""
    # Handled programmatically now.
    count = 0
    for dirpath_str, _, filenames in os.walk(COVER_ROOT):
        dirpath = Path(dirpath_str)
        for filename in filenames:
            full_path = dirpath / filename
            if full_path.is_symlink():
                with suppress(OSError):
                    full_path.unlink(missing_ok=True)
                    count += 1
    if count:
        print(f"Removed {count} missing-cover symlinks from cover cache.")


class Migration(migrations.Migration):
    """Migrate."""

    dependencies = [
        ("codex", "0026_comicbox_1"),
    ]

    operations = [
        migrations.AddField(
            model_name="comic",
            name="sort_name",
            field=models.CharField(db_index=True, default="", max_length=128),
        ),
        migrations.AddField(
            model_name="failedimport",
            name="sort_name",
            field=models.CharField(db_index=True, default="", max_length=128),
        ),
        migrations.AddField(
            model_name="folder",
            name="sort_name",
            field=models.CharField(db_index=True, default="", max_length=128),
        ),
        migrations.AddField(
            model_name="imprint",
            name="sort_name",
            field=models.CharField(db_index=True, default="", max_length=128),
        ),
        migrations.AddField(
            model_name="publisher",
            name="sort_name",
            field=models.CharField(db_index=True, default="", max_length=128),
        ),
        migrations.AddField(
            model_name="series",
            name="sort_name",
            field=models.CharField(db_index=True, default="", max_length=128),
        ),
        migrations.AddField(
            model_name="storyarc",
            name="sort_name",
            field=models.CharField(db_index=True, default="", max_length=128),
        ),
        migrations.AlterField(
            model_name="adminflag",
            name="key",
            field=models.CharField(
                choices=[
                    ("FV", "Folder View"),
                    ("RG", "Registration"),
                    ("NU", "Non Users"),
                    ("AU", "Auto Update"),
                    ("SO", "Search Index Optimize"),
                    ("IM", "Import Metadata"),
                ],
                db_index=True,
                max_length=2,
            ),
        ),
        migrations.AlterField(
            model_name="adminflag",
            name="key",
            field=models.CharField(
                choices=[
                    ("FV", "Folder View"),
                    ("RG", "Registration"),
                    ("NU", "Non Users"),
                    ("AU", "Auto Update"),
                    ("SO", "Search Index Optimize"),
                    ("IM", "Import Metadata"),
                    ("DC", "Dynamic Group Covers"),
                ],
                db_index=True,
                max_length=2,
            ),
        ),
        migrations.RunPython(_generate_sort_name),
        migrations.RunPython(_remove_cover_symlinks),
    ]
