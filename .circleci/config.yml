executors:
  amd64-large-executor:
    machine:
      image: ubuntu-2404:current
      resource_class: large
  amd64-medium-executor:
    machine:
      image: ubuntu-2404:current
      resource_class: medium
  arm64-medium-executor:
    machine:
      image: ubuntu-2404:current
      resource_class: arm.medium
orbs:
  discord: antonioned/discord@0.1.0
jobs:
  build-base-amd64: &build-base
    executor: amd64-medium-executor
    steps:
      - checkout
      - run:
          command: ./docker/docker-init.sh
          name: Login to Docker Hub, Install binfmt Platform, Create the buildx Builder
      - run:
          command: ./docker/docker-env.sh
          name: Generate image versions
      - run:
          command: ./docker/docker-build-image.sh codex-base
          name: Build Base Image
      - run:
          command: ./docker/docker-build-image.sh codex-builder-base
          name: Build Builder Base Image
      - persist_to_workspace:
          paths:
            - ./.env-*
          root: .
      - discord/status:
          fail_only: true
          webhook: "${DISCORD_STATUS_WEBHOOK}"
          failure_message: "**${CIRCLE_USERNAME}**'s build: **${CIRCLE_JOB}** failed."
  build-base-arm64:
    !!merge <<: *build-base
    executor: arm64-medium-executor
  build-dist:
    executor: amd64-large-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          command: ./docker/docker-init.sh
          name: Login to Docker Hub, Install binfmt platform & Create the buildx Builder
      - run:
          command: ./docker/docker-build-image.sh codex-dist-builder
          name: Build Distribution Builder Image
      - run:
          command: ./docker/docker-compose-exit.sh codex-backend-lint
          name: "Backend: Lint"
      - run:
          command: ./docker/docker-compose-exit.sh codex-frontend-lint
          name: "Frontend: Lint"
      - run:
          command: ./docker/docker-compose-exit.sh codex-frontend-test
          name: "Frontend: Test"
      - store_test_results:
          path: test-results/jest
      - run:
          command: ./docker/docker-compose-exit.sh codex-frontend-build
          name: "Frontend: Build"
      - run:
          command: ./docker/docker-compose-exit.sh codex-backend-test
          name: "Backend: Test"
      - store_test_results:
          path: test-results/pytest
      - store_artifacts:
          path: test-results/coverage
      - store_artifacts:
          path: frontend/coverage
      - run:
          command: ./docker/docker-compose-exit.sh codex-build-dist
          name: Build Distribution
      - persist_to_workspace:
          paths:
            - ./dist
          root: .
      - discord/status:
          fail_only: false
          webhook: "${DISCORD_STATUS_WEBHOOK}"
          failure_message: "**${CIRCLE_USERNAME}**'s build: **${CIRCLE_JOB}** failed."
          success_message: "**${CIRCLE_USERNAME}**'s build: **${CIRCLE_JOB}** built."
  build-amd64: &build
    executor: amd64-medium-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          command: ./docker/docker-init.sh
          name: Login to Docker Hub, Install binfmt platform & Create the buildx Builder
      - run:
          command: ./docker/docker-build-image.sh codex -arch
          name: Build Codex Runnable Image
      - discord/status:
          fail_only: true
          webhook: "${DISCORD_STATUS_WEBHOOK}"
          failure_message: "**${CIRCLE_USERNAME}**'s build: **${CIRCLE_JOB}** failed."
  build-arm64:
    !!merge <<: *build
    executor: arm64-medium-executor
  deploy:
    executor: amd64-medium-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
        run: uv publish
      - run:
          command: ./docker/docker-install-api-deps.sh
          name: Install docker API dependencies
      - run:
          command: ./docker/docker-login.sh
          name: Login to Docker Hub
      - run:
          command: ./docker/docker-create-multiarch-codex.sh
          name: Create multi-arch images
      - run:
          command: make publish
          name: Publish Codex Package to PyPi
      - discord/status:
          fail_only: false
          webhook: "${DISCORD_STATUS_WEBHOOK}"
          failure_message: "**${CIRCLE_USERNAME}**'s build: **${CIRCLE_JOB}** failed."
          success_message: "**${CIRCLE_USERNAME}**'s build: **${CIRCLE_JOB}** deployed."
    docker:
      - image: ghcr.io/astral-sh/uv:bookworm-slim
version: 2.1
workflows:
  main:
    jobs:
      - build-base-amd64: &filters-all
          filters:
            branches:
              only:
                - develop
                - pre-release
                - main
                - /.*-ci/
      - build-base-arm64: &filters-release
          filters:
            branches:
              only:
                - pre-release
                - main
      - build-dist:
          !!merge <<: *filters-all
          requires:
            - build-base-amd64
      - build-amd64:
          !!merge <<: *filters-release
          requires:
            - build-base-amd64
            - build-dist
      - build-arm64:
          !!merge <<: *filters-release
          requires:
            - build-base-arm64
            - build-dist
      - deploy:
          !!merge <<: *filters-release
          requires:
            - build-amd64
            - build-arm64
  version: 2.1
